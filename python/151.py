# from collections import Counter

def children(parent):
    out = []
    if parent[2] > 0:
        child = list(parent)
        child[2] -= 1
        child[3] += 1
        child[4] += 1
        child[5] += 1
        out.append((parent[2], tuple(child)))
    if parent[3] > 0:
        child = list(parent)
        child[3] -= 1
        child[4] += 1
        child[5] += 1
        out.append((parent[3], tuple(child)))
    if parent[4] > 0:
        child = list(parent)
        child[4] -= 1
        child[5] += 1
        out.append((parent[4], tuple(child)))
    if parent[5] > 0:
        child = list(parent)
        child[5] -= 1
        out.append((parent[5], tuple(child)))
    return out

from collections import Counter


def run(n):
    row = Counter()
    row[(0,0,1,1,1,1)] = 1
    for _ in range(n):
        next_row = Counter()
        tot = 0
        for parent, count in row.items():
            for weight, child in children(parent):
                next_row[child] += count * weight
                if sum(child) == 1:
                    # print(child)
                    tot += count * weight
        print(tot, sum(next_row.values()))
        row = next_row


def traverse():
    root = (0,0,1,1,1,1)
    stack = [(root, 0)]
    leaves = 0
    total = 0
    while stack:
        node, count = stack.pop()
        if sum(node) == 1:
            count += 1
        if sum(node) == 0:
            leaves += 1
            total += count
            continue
        for child in children(node):
            stack.append((child, count))
    return leaves, total




from random import randint

def monte(runs):
    total = 0
    for _ in range(runs):
        cards = [2,3,4,5]
        score = 0
        while cards:
            if len(cards) == 1:
                score += 1
            i = randint(0, len(cards)-1)
            c = cards[i]
            new_cards = cards[:i] + cards[i+1:]
            while c < 5:
                c += 1
                new_cards.append(c)
            cards = new_cards
        total += score
    return (runs, total)



[1,2,3,4]
[5,2,3,4]
[5,6,3,4]
# [4,5,6,7]
# [5,6,7,8]
[7,6,9,8]
[7,10,9,8]
[11,10,9,8]
[11,10,9,12]
# []


[0,1,0,1,0,1,0,1,0,1,0,1,0,1]
[0,0,1,0,0,1,0,0,1,0,0,1,0,0]
[0,0,0,1,0,0,0,1,0,0,0,1,0,0]

# 1,2,3,4,5,6,7,8,9,10

# 6,2,3,4,5

# 3,4,5,6,7

# 7,6,3,4,5

# 7,8,6,4,5
# 7,6,9,8,5
# 7,6,9,8,10

[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]
[37,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]
[37,38,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]
[37,38,39,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]
[37,38,39,40,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]


from primesandfactors import primes2


def pgaps(rng, lim):
    l1, l2 = 0, 0
    for p in primes2(rng):
        if l2 > lim and p-l2>lim: print(p - l2, (p,l1,l2))
        l1, l2 = p, l1


[1,2,3,4,5,6,7,8,9,10]
[11,2,3,4,5,6,7,8,9,10]
[11,12,3,4,5,6,7,8,9,10]
[113,118,111,116,115,114,119,112,117,110]
[113,118,111,116,115,114,119,112,117,120]
[331,326,327,332,325,324,329,328,333,330]
[331,334,327,332,335,336,329,328,333,330]
[367,362,363,364,365,366,371,368,369,370]
[367,372,363,364,365,366,371,368,369,370]
[421,422,429,428,425,426,427,424,423,420]
[421,422,429,428,425,426,427,424,423,430]
[431,422,429,428,425,426,427,424,423,430]
[431,432,429,428,425,426,427,424,423,430]




(10*11)
(9*13)
(8*14)
(7*17)
(6*19)
(5*23)
(4*29)
(3*37)
(2*59)
                    #  28,25,24,21,24,27,20



121
143
169
187
209
221
247
253
289
299
319
323
361
377
391
437
493
529


310,306,304,301

324-333

326-335
327-336

330,333,328,329,324,325,332,327,326,331
330,333,328,329,336,335,332,327,334,331



332-341

330,333,336,


338-347
339-348

340,342,344,343,345,

362-371
363-372

370,369,368,371,366,365,364,363,362,367
370,369,368,371,366,365,364,363,372,367

398-407
399-408

400,405,408,402,

402-411
404-413
405-414

409-418
[410,405,408,413,414,]

420-429
421-430
422-431

[420,423,424,427,426,425,428,429,422,421]
[430,423,424,427,426,425,428,429,422,421]
[430,423,424,427,426,425,428,429,422,431]
[430,423,424,427,426,425,428,429,432,431]
